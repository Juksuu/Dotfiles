;; ********** Variables **********
(defvar volume_slider false)

(defpoll time-text :interval "1s" "date +'%b %d, %H:%M'")
(defpoll volume_bar :interval "1s" "scripts/volume status")
(defpoll volume_value :interval "1s" "scripts/volume")

(deflisten workspaces_0 :initial "[]" "scripts/workspaces 0")
(deflisten workspaces_1 :initial "[]" "scripts/workspaces 1")

;; ********** Widgets **********
(defwidget separator_bar []
 (label :class "separator-bar" :text "|"))

;; Workspaces
(defwidget workspaces [workspace_list]
 (box :class "workspace" :space-evenly true :spacing 8
  (for workspace in workspace_list
   (box
    :class "${workspace.active ? "ws-active" : "ws-inactive"}"
    :halign "center"
    :valign "center"
    (label :class "ws-text" :text "${workspace.id}")))))

;; Clock
(defwidget clock_module []
 (box :class "time-module-box" :space-evenly "false"
  (button :class "time-module" :onclick "eww open --toggle calendar" "${time-text}")))

;; System buttons
(defwidget system_buttons []
 (box :class "system-buttons-box" :space-evenly false :spacing 10
  (eventbox
   :onhover "eww update volume_slider=true"
   :onhoverlost "eww update volume_slider=false"
   (box :class "volume-system-button" :space-evenly false
    (button
    :class "volume-system-button"
    :onclick "eww open --toggle system-menu"
    :onrightclick "scripts/volume toggle"
    "${volume_bar}")
    (revealer :transition "slideleft" :duration "350ms" :reveal volume_slider
     (scale :class "volume-slider"
      :value volume_value
      :orientation "h"
      :width 100
      :max 100
      :min 0
      :onchange "amixer -q sset Master {}%"))))))

;; Bar sections
(defwidget left []
 (box
  :orientation "h"
  :space-evenly false
  :halign "start"
  :class "left-modules"
  (workspaces :workspace_list workspaces_1)))

(defwidget left_2 []
 (box
  :orientation "h"
  :space-evenly false
  :halign "start"
  :class "left-modules"
  (workspaces :workspace_list workspaces_0)))

(defwidget right []
 (box
  :orientation "h"
  :space-evenly false
  :halign "end"
  :class "right-modules"
  (system_buttons)
  (separator_bar)
  (clock_module)))

(defwidget right_2 []
 (box
  :orientation "h"
  :space-evenly false
  :halign "end"
  :class "right-modules"
  (clock_module)))

(defwidget center []
 (box :orientation "h" :space-evenly false :halign "center" :class "center_modules"))

(defwidget center_2 []
 (box :orientation "h" :space-evenly false :halign "center" :class "center_modules"))

;; Bars
(defwidget bar_1 []
 (box :class "bar" :orientation "h" (left) (center) (right)))

(defwidget bar_2 []
 (box :class "bar" :orientation "h" (left_2) (center_2) (right_2)))


;; ********** Windows **********
(defwindow bar
 :monitor 1
 :exclusive true
 :stacking "bg"
 :windowtype "dock"
 :geometry (geometry :y "4px" :width "99%" :anchor "top center")
 (bar_1))

(defwindow bar2
 :monitor 0
 :exclusive true
 :stacking "bg"
 :windowtype "dock"
 :geometry (geometry :y "4px" :width "99%" :anchor "top center")
 (bar_2))
