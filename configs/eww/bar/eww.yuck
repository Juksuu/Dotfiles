;; ********** Variables **********

(defpoll clock_time :interval "30s" "date +\%H:%M")
(defpoll clock_date :interval "30s" "date '+%d/%m'")

(defvar time_reveal false)

(deflisten workspaces :initial "[]" "scripts/workspaces")
(deflisten window_title_0 :initial "" "scripts/window-title 0")
(deflisten window_title_1 :initial "" "scripts/window-title 1")

;; ********** Widgets **********

(defwidget sep []
 (box :vexpand "false" :hexpand "false"
  (label :class "separ" :text "|")))

;; Workspaces
(defwidget workspaces []
 (eventbox :class "workspaces-widget"
  (box :space-evenly true
   (for workspace in workspaces
    (box :class "${workspace.id == workspace.active ? "workspace-current" : "workspace"}"
     (label :text "${workspace.id == workspace.active ? "  " : "  "}"))))))

;; Window title
(defwidget window_title_monitor_0 []
 (box :class "window-title"
  (label :text window_title_0 :limit-width 25)))

(defwidget window_title_monitor_1 []
 (box :class "window-title"
  (label :text window_title_1 :limit-width 25)))

;; Clock
(defwidget clock_module []
 (eventbox
  :onhover "${EWW_CMD} update time_reveal=true"
  :onhoverlost "${EWW_CMD} update time_reveal=false"
  (box :class "module" :space-evenly "false" :orientation "h" :spacing "4"
   (label :text clock_time :class "clock_time_class" )
   (revealer :transition "slideleft" :reveal time_reveal :duration "350ms"
    (label :text clock_date :class "clock_date_class")))))

;; Bar sections
(defwidget left []
 (box :orientation "h"
  :space-evenly false
  :halign "start"
  :class "left_modules"
  (workspaces)
  (window_title_monitor_1)))

(defwidget left_2 []
 (box :orientation "h"
  :space-evenly false
  :halign "start"
  :class "left_modules"
  (workspaces)
  (window_title_monitor_0)))

(defwidget right []
 (box :orientation "h"
  :space-evenly false
  :halign "end"
  :class "right_modules"
  (sep)
  (clock_module)))

(defwidget right_2 []
 (box :orientation "h"
  :space-evenly false
  :halign "end"
  :class "right_modules"
  (sep)
  (clock_module)))

(defwidget center []
 (box :orientation "h"
  :space-evenly false
  :halign "center"
  :class "center_modules"))

(defwidget center_2 []
 (box :orientation "h"
  :space-evenly false
  :halign "center"
  :class "center_modules"))

;; Bars
(defwidget bar_1 []
 (box :class "bar_class"
  :orientation "h"
  (left)
  (center)
  (right)
 ))

(defwidget bar_2 []
 (box :class "bar_class"
  :orientation "h"
  (left_2)
  (center_2)
  (right_2)
 ))


;; ********** Windows **********

(defwindow bar
 :monitor 1
 :stacking "fg"
 :windowtype "dock"
 :geometry (geometry
     :x "0%"
     :y "4px"
     :width "99%"
     :anchor "top center")
 (bar_1))

(defwindow bar2
 :monitor 0
 :stacking "fg"
 :windowtype "dock"
 :geometry (geometry
     :x "0%"
     :y "4px"
     :width "99%"
     :anchor "top center")
 (bar_2))
